<?xml version="1.0" encoding="UTF-8"?>
<configuration>

	<!-- 定义log文件的目录 -->
	<property name="LOG_HOME" value="/home/ryms/logs"></property>
	<property name="maxFileSize" value="50MB"></property>
	<property name="charset" value="UTF-8"></property>
	<property name="immediateFlush" value="false"></property>
	<property name="pattern"
		value="%d{yyyy-MM-dd HH:mm:ss.SSS} [%level] %logger{0} -%msg%n"></property>

	<appender name="STDOUT" class="ch.qos.logback.core.ConsoleAppender">
		<encoder>
			<!-- %.-1level 只显示信息级别的首字母,%-5level 左对齐显示信息级别全称 -->
			<pattern>${pattern}</pattern>
			<charset>${charset}</charset>
		</encoder>
	</appender>

	<appender name="INFO_FILE"
		class="ch.qos.logback.core.rolling.RollingFileAppender">
		<file>${LOG_HOME}/info.log</file>
		<append>true</append>
		<rollingPolicy
			class="ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy">
			<fileNamePattern>${LOG_HOME}/logs/info.%d{yyyy-MM-dd}.%i.log.zip
			</fileNamePattern>
			<maxFileSize>${maxFileSize}</maxFileSize>
		</rollingPolicy>
		<encoder>
			<pattern>${pattern}</pattern>
			<charset>${charset}</charset>
			<immediateFlush>${immediateFlush}</immediateFlush>
		</encoder>
		<filter class="ch.qos.logback.classic.filter.LevelFilter">
			<level>INFO</level>
			<onMatch>ACCEPT</onMatch>
			<onMismatch>DENY</onMismatch>
		</filter>
	</appender>

	<!-- 异步输出 -->
	<appender name="INFO_FILE_ASYNC" class="ch.qos.logback.classic.AsyncAppender">
		<!-- 不丢失日志.默认的,如果队列的80%已满,则会丢弃TRACT、DEBUG、INFO级别的日志 -->
		<discardingThreshold>0</discardingThreshold>
		<!-- 更改默认的队列的深度,该值会影响性能.默认值为256 -->
		<queueSize>8192</queueSize>
		<!-- 添加附加的appender,最多只能添加一个 -->
		<appender-ref ref="INFO_FILE" />
	</appender>

	<appender name="DEBUG_FILE"
		class="ch.qos.logback.core.rolling.RollingFileAppender">
		<file>${LOG_HOME}/debug.log</file>
		<append>true</append>
		<rollingPolicy
			class="ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy">
			<fileNamePattern>${LOG_HOME}/logs/debug.%d{yyyy-MM-dd}.%i.log.zip
			</fileNamePattern>
			<maxFileSize>${maxFileSize}</maxFileSize>
		</rollingPolicy>
		<encoder>
			<pattern>${pattern}</pattern>
			<charset>${charset}</charset>
			<immediateFlush>${immediateFlush}</immediateFlush>
		</encoder>
		<filter class="ch.qos.logback.classic.filter.LevelFilter">
			<level>DEBUG</level>
			<onMatch>ACCEPT</onMatch>
			<onMismatch>DENY</onMismatch>
		</filter>
	</appender>

	<!-- 异步输出 -->
	<appender name="DEBUG_FILE_ASYNC" class="ch.qos.logback.classic.AsyncAppender">
		<!-- 不丢失日志.默认的,如果队列的80%已满,则会丢弃TRACT、DEBUG、INFO级别的日志 -->
		<discardingThreshold>0</discardingThreshold>
		<!-- 更改默认的队列的深度,该值会影响性能.默认值为256 -->
		<queueSize>8192</queueSize>
		<!-- 添加附加的appender,最多只能添加一个 -->
		<appender-ref ref="DEBUG_FILE" />
	</appender>

	<appender name="ERROR_FILE"
		class="ch.qos.logback.core.rolling.RollingFileAppender">
		<file>${LOG_HOME}/error.log</file>
		<append>true</append>
		<rollingPolicy
			class="ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy">
			<fileNamePattern>${LOG_HOME}/logs/error.%d{yyyy-MM-dd}.%i.log.zip
			</fileNamePattern>
			<maxFileSize>${maxFileSize}</maxFileSize>
		</rollingPolicy>
		<encoder>
			<pattern>${pattern}</pattern>
			<charset>${charset}</charset>
			<immediateFlush>${immediateFlush}</immediateFlush>
		</encoder>
		<filter class="ch.qos.logback.classic.filter.LevelFilter">
			<level>ERROR</level>
			<onMatch>ACCEPT</onMatch>
			<onMismatch>DENY</onMismatch>
		</filter>
	</appender>

	<!-- 异步输出 -->
	<appender name="ERROR_FILE_ASYNC" class="ch.qos.logback.classic.AsyncAppender">
		<!-- 不丢失日志.默认的,如果队列的80%已满,则会丢弃TRACT、DEBUG、INFO级别的日志 -->
		<discardingThreshold>0</discardingThreshold>
		<!-- 更改默认的队列的深度,该值会影响性能.默认值为256 -->
		<queueSize>8192</queueSize>
		<!-- 添加附加的appender,最多只能添加一个 -->
		<appender-ref ref="ERROR_FILE" />
	</appender>
	
	<root level="INFO">
		<appender-ref ref="STDOUT" />
		<appender-ref ref="INFO_FILE_ASYNC" />
		<appender-ref ref="DEBUG_FILE_ASYNC" />
		<appender-ref ref="ERROR_FILE_ASYNC" />
	</root>

</configuration>   